trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - .gitignore.txt
    - README.md
    - LICENSE
    - azure-pipelines-windows.yml
    - azure-pipelines-macos.yml

pool:
  vmImage: ubuntu-16.04

variables:
  buildConfiguration: Release

steps:
- task: DotNetCoreInstaller@0
  inputs:
    packageType: sdk
    version: 2.1.505
  displayName: 'Upgrade .NET Core'

- script: |
    dotnet build AudioWorks/AudioWorks.sln --configuration $(buildConfiguration)
  displayName: 'Build $(buildConfiguration) configuration'

- script: |
    sudo curl -o /usr/local/bin/nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
    sudo apt-get update
    sudo apt-get install --yes libflac8
    sudo apt-get install --yes libmp3lame0
    sudo apt-get install --yes libopus0
    sudo apt-get install --yes libebur128-1
    sudo updatedb
    dotnet tool install --global dotnet-reportgenerator-globaltool
  displayName: 'Install prerequisites'

- powershell: |
    $settingsDir = "$([System.Environment]::GetFolderPath(26))/AudioWorks"
    $localFeedDir = (New-Item "$settingsDir/LocalFeed" -ItemType Directory).FullName
    Get-ChildItem -Path AudioWorks/src/Extensions -Filter *.nupkg -Recurse | Select-Object -ExpandProperty FullName | % { mono /usr/local/bin/nuget.exe add $_ -Source $localFeedDir -NonInteractive }
    $content = Get-Content AudioWorks/src/AudioWorks.Common/settings.json | ConvertFrom-Json
    $content.EnableTelemetry = $false
    $content.ExtensionRepository = $localFeedDir
    $content | ConvertTo-Json | Set-Content "$settingsDir/settings.json"
    dotnet test AudioWorks/tests/AudioWorks.Api.Tests --no-build --configuration Release --filter "FullyQualifiedName=AudioWorks.Api.Tests.AudioFileTests.HasExpectedPath"
    $testResult = 0
    Get-ChildItem -Path AudioWorks/tests -Filter *.Tests -Directory | % { dotnet test $_.FullName --no-build --logger trx --configuration $env:BUILDCONFIGURATION /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Exclude="[AudioWorks.*.Tests]*%2c[AudioWorks.TestUtilities]*%2c[xunit.*]*%2c[*]JetBrains.*" /p:IncludeDirectory="$settingsDir/Extensions/netcoreapp2.1/*%2c$($_.FullName)/bin/$($env:BUILDCONFIGURATION)/netcoreapp2.1/AudioWorks.Commands/netcoreapp2.1"; if ($LastExitCode -ne 0) { $testResult = $LastExitCode } }
    exit $testResult
  displayName: 'Run tests'

- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
  displayName: 'Publish test results'
  condition: succeededOrFailed()

- script: |
    reportgenerator -reports:AudioWorks/tests/*/coverage.*.xml -targetdir:Reports/Cobertura -reporttypes:Cobertura
    reportgenerator -reports:Reports/Cobertura/Cobertura.xml -targetdir:Reports/HTML "-reporttypes:HTMLInline;HTMLChart"
  displayName: 'Generate code coverage results'

- task: PublishCodeCoverageResults@1
  inputs:
    codecoverageTool: cobertura
    summaryFileLocation: $(Build.SourcesDirectory)/Reports/Cobertura/Cobertura.xml
    reportDirectory: $(Build.SourcesDirectory)/Reports/HTML
  displayName: 'Publish code coverage results'

- task: CopyFiles@2
  inputs:
    contents: 'AudioWorks/src/Extensions/**/*.Linux.*.nupkg'
    targetFolder: $(Build.ArtifactStagingDirectory)
  displayName: 'Copy artifacts to staging directory'

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts'