<!-- Copyright © 2019 Jeremy Herbison

This file is part of AudioWorks.

AudioWorks is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public
License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
version.

AudioWorks is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
details.

You should have received a copy of the GNU Affero General Public License along with AudioWorks. If not, see
<https://www.gnu.org/licenses/>. -->

<mahapps:MetroWindow x:Class="AudioWorks.UI.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:prism="http://prismlibrary.com/"
        xmlns:mahapps="http://metro.mahapps.com/winfx/xaml/controls"
        xmlns:fluent="urn:fluent-ribbon"
        mc:Ignorable="d"
        prism:ViewModelLocator.AutoWireViewModel="True"
        Loaded="MainWindow_OnLoaded" ShowSystemMenuOnRightClick="False"
        Title="AudioWorks" TitleCharacterCasing="Normal" Icon="../Resources/Icon.png" Height="600" Width="1000">
    <mahapps:MetroWindow.TitleTemplate>
        <DataTemplate>
            <fluent:RibbonTitleBar x:Name="RibbonTitleBar" Header="{Binding Title, RelativeSource={RelativeSource AncestorType=Window}}"/>
        </DataTemplate>
    </mahapps:MetroWindow.TitleTemplate>
    <Window.InputBindings>
        <KeyBinding Command="{Binding OpenFilesCommand}" Modifiers="Control" Key="O"/>
    </Window.InputBindings>
    <Grid>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <fluent:Ribbon>
            <fluent:Ribbon.Menu>
                <fluent:ApplicationMenu >
                    <fluent:MenuItem Header="Open" Command="{Binding OpenFilesCommand}"/>
                    <fluent:MenuItem Header="Exit" Command="{Binding ExitCommand}"/>
                </fluent:ApplicationMenu>
            </fluent:Ribbon.Menu>
            <fluent:RibbonTabItem Header="Home">
                <fluent:RibbonGroupBox Header="Clipboard">
                    <fluent:Button Header="Cut" Command="Cut"/>
                    <fluent:Button Header="Copy" Command="Copy"/>
                    <fluent:Button Header="Paste" Command="Paste"/>
                </fluent:RibbonGroupBox>
            </fluent:RibbonTabItem>
        </fluent:Ribbon>

        <DataGrid Grid.Row="1" ItemsSource="{Binding AudioFiles}" AutoGenerateColumns="False" PreviewMouseRightButtonUp="DataGrid_OnPreviewMouseRightButtonUp"
                  GridLinesVisibility="Vertical">
            <DataGrid.Resources>
                <Style TargetType="DataGridCell" x:Key="NumericStyle" BasedOn="{StaticResource MetroDataGridCell}">
                    <Setter Property="HorizontalAlignment" Value="Right"/>
                </Style>
            </DataGrid.Resources>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="SelectionChanged">
                    <i:InvokeCommandAction Command="{Binding SelectionChangedCommand}" CommandParameter="{Binding SelectedItems, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <DataGrid.InputBindings>
                <MouseBinding MouseAction="LeftDoubleClick" Command="{Binding EditSelectionCommand}"/>
            </DataGrid.InputBindings>
            <DataGrid.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="Edit..." Command="{Binding EditSelectionCommand}"/>
                    <Separator/>
                    <MenuItem Header="Revert Changes" Command="{Binding RevertSelectionCommand}"/>
                    <MenuItem Header="Save Changes" Command="{Binding SaveSelectionCommand}"/>
                    <Separator/>
                    <MenuItem Header="Remove" Command="{Binding RemoveSelectionCommand}"/>
                </ContextMenu>
            </DataGrid.ContextMenu>
            <DataGrid.ItemContainerStyle>
                <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource {x:Type DataGridRow}}">
                    <Style.Triggers>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="ToolTip" Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={x:Static RelativeSource.Self}}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.ItemContainerStyle>
            <DataGrid.Columns>
                <DataGridTemplateColumn Header="Cover">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Image Source="{Binding Metadata.CoverImage}" Height="18"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn Header="Path" Binding="{Binding Path}" IsReadOnly="True"/>
                <DataGridTextColumn Header="Track #" CellStyle="{StaticResource NumericStyle}" Binding="{Binding Metadata.TrackNumber, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="Title" Binding="{Binding Metadata.SongTitle, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="Artist" Binding="{Binding Metadata.Artist, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="Composer" Binding="{Binding Metadata.Composer, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="Album" Binding="{Binding Metadata.Album, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="Year" CellStyle="{StaticResource NumericStyle}" Binding="{Binding Metadata.Year, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridTextColumn Header="Genre" Binding="{Binding Metadata.Genre, ValidatesOnExceptions=True, UpdateSourceTrigger=PropertyChanged}"/>
                <DataGridCheckBoxColumn Header="Modified" Binding="{Binding Metadata.Modified, Mode=OneWay}" IsReadOnly="True" ElementStyle="{DynamicResource MetroDataGridCheckBox}"/>
                <DataGridTemplateColumn>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <Button Command="{Binding SaveCommand}">Save</Button>
                                <Button Command="{Binding RevertCommand}">Revert</Button>
                            </StackPanel>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>

    </Grid>
</mahapps:MetroWindow>
